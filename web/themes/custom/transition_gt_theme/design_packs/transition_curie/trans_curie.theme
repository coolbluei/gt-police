<?php

use \Drupal\block_content\Entity\BlockContent;
use Drupal\taxonomy\Entity\Term;

/**
 * Implementation of hook_local_tasks().
 *
 *
 */
function trans_curie_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'btn btn-secondary';
}

/**
 * Implementation of hook_form_alter().
 *
 *
 */
function trans_curie_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implementation of block_form_alter().
 *
 *
 */
function trans_curie_form_search_block_form_alter(&$form, &$form_state)
{
  $form['keys']['#attributes']['placeholder'][] = t('Search here...');
  $form['actions']['submit']['#value'] = html_entity_decode('GO');
  $form['actions']['submit']['#attributes']['alt'] = "Search submit";
  $form['actions']['submit']['#attributes']['class'][] = 'btn btn-default';
}

/**
 * Implementation of hook_preprocess_page().
 *
 *
 */
function trans_curie_preprocess_page(&$variables) {
  $variables['contact_title'] = theme_get_setting('contact_title');
  $variables['contact_address'] = theme_get_setting('contact_address');
  $variables['contact_address_2'] = theme_get_setting('contact_address_2');
  $variables['contact_city'] = theme_get_setting('contact_city');
  $variables['contact_state'] = theme_get_setting('contact_state');
  $variables['contact_zip_code'] = theme_get_setting('contact_zip_code');
  $variables['contact_telephone'] = theme_get_setting('contact_telephone');
  $variables['contact_map_url'] = theme_get_setting('contact_map_url');
  $variables['cas_login'] = theme_get_setting('cas_login');
  $variables['super_footer'] = theme_get_setting('super_footer');
  $variables['footer_first_size'] = (!theme_get_setting('footer_first_size') || theme_get_setting('footer_first_size') == 0) ? 3 : theme_get_setting('footer_first_size');
  $variables['footer_second_size'] = (!theme_get_setting('footer_second_size') || theme_get_setting('footer_second_size') == 0) ? 3 : theme_get_setting('footer_second_size');
  $variables['footer_third_size'] = (!theme_get_setting('footer_third_size') || theme_get_setting('footer_third_size') == 0) ? 3 : theme_get_setting('footer_third_size');
  $variables['footer_four_size'] = (!theme_get_setting('footer_four_size') || theme_get_setting('footer_four_size') == 0) ? 3 : theme_get_setting('footer_four_size');
}

/**
 * Implementation of hook_preprocess_html().
 *
 *
 */
/* Allow CSS/Footer Customization and add path alias to body class */
function trans_curie_preprocess_html(&$variables) {
  $variables['attributes']['class'][] = theme_get_setting('hide-breadcrumb');
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = 'path-' . \Drupal\Component\Utility\Html::cleanCssIdentifier($path_alias);

  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['attributes']['class'][] = 'page-nid-' . $node->id();
  }

  if (theme_get_setting('customize_css')) {
    $custom_style = preg_replace('!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', theme_get_setting('customize_css'));
    $custom_style = str_replace(array("\r\n", "\r", "\n", "\t", '  ', '   ', '    '), '', $custom_style);
    $variables['customize_css'] = $custom_style;
  }

  $account = \Drupal::currentUser();
  $roles = $account->getRoles();
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }
}

/**
 * Implementation of hook_views_views_grid().
 *
 *
 */
function trans_curie_preprocess_views_view_grid(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];
  $style = $view->style_plugin;
  $options = $style->options;
  $variables['gt_masonry']['class'] = '';
  $variables['gt_masonry']['class_item'] = '';
  if (strpos($options['row_class_custom'], 'masonry') || $options['row_class_custom'] == 'masonry') {
    $variables['gt_masonry']['class'] = 'post-masonry-style row';
    $variables['gt_masonry']['class_item'] = 'item-masonry';
  }
}

function trans_curie_preprocess_block(&$variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContent) {
    $type = $content['#block_content']->bundle();
    if ($type === 'banner' or $type === 'call_to_action' or $type === 'image_with_copy') {
      $term = Term::load($content['#block_content']->get('field_style')->getString());
      $variables['color_background'] = str_replace(' ', '-', strtolower(Term::load($term->get('field_background_color')->getString())->getName()));
      $variables['color_text'] = str_replace(' ', '-', strtolower(Term::load($term->get('field_text_color')->getString())->getName()));
      $variables['color_text_background'] = str_replace(' ', '-', strtolower(Term::load($term->get('field_text_background_color')->getString())->getName()));
      $variables['color_button'] = str_replace(' ', '-', strtolower(Term::load($term->get('field_button_color')->getString())->getName()));
    }
  }
  $variables['hide_breadcrumb'] = theme_get_setting('hide_breadcrumb');
  $variables['title_one_url'] = theme_get_setting('title_one_url');
  $variables['title_two_url'] = theme_get_setting('title_two_url');
}

function trans_curie_preprocess_block__inline_block__modal_image(&$variables) {
  $image_list = $variables['elements']['content']['#block_content']->get('field_image');
  while (!$image_list->isEmpty()) {
    $variables['images'][] = $image_list->first();
    $image_list->removeItem(0);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function trans_curie_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function trans_curie_plugin_filter_block__layout_builder_alter(&$definitions, array $extra) {
  // Create a callback function to update block info.
  $update_blocks
    = function ($category, $blocks, $prefix = NULL) use (&$definitions) {
    foreach ($blocks as $id => $label) {
      $definition = &$definitions[$prefix ? "$prefix:$id" : $id];
      $definition['category'] = $category;
      if ($label) {
        $definition['admin_label'] = $label;
      }
    }
  };
  $update_blocks(t('Add GT Blocks'), [
    'heading_title' => t('Heading Title'),
    'accordion' => t('Accordion'),
    'basic' => t('Basic Block'),
    'call_to_action' => t('Call to Action'),
    'image' => t('Image'),
    'faqs' => t('FAQs'),
    'image_with_copy' => t('Image with Copy'),
    'progress_bar' => t('Progress Bar'),
    'modal_image' => t('Modal'),
    'quote_text' => t('Quote'),
    'custom_links' => t('Custom Links'),
    'video_embed' => t('Video'),
    'banner' => t('Banner'),
    'spacer' => t('Spacer'),
  ], 'inline_block');
}
